<launch>

<!-- Localization-only mode -->
  <arg name="localization"      default="false"/>
  <arg     if="$(arg localization)" name="rtabmap_args"  default=""/>
  <arg unless="$(arg localization)" name="rtabmap_args"  default="--delete_db_on_start"/>

 <!-- <include file="$(find tankbot)/launch/openni2.launch"/>-->
  <param name="/camera/driver/data_skip" value="1" />
  <include file="$(find openni2_launch)/launch/openni2.launch">
    <arg name="depth_registration" value="True" />
  </include>

 <!-- <include file="$(find rtabmap_ros)/launch/rtabmap.launch"/> -->

  <group ns="rtabmap">
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="$(arg rtabmap_args)">
      <param name="frame_id"            type="string" value="base_footprint"/>
      <param name="subscribe_scan"      type="bool" value="true"/>
      <param name="use_action_for_goal" type="bool" value="true"/>
      <param name="cloud_decimation"    type="int" value="1"/>
      <param name="grid_eroded"         type="bool" value="true"/>
      <param name="grid_cell_size"      type="double" value="0.05"/>

      <remap from="odom"    to="/base_controller/odom"/>
      <remap from="scan"    to="/base_scan"/>
      <remap from="mapData" to="mapData"/>

      <remap from="rgb/image"       to="/camera/rgb/image_rect_color"/>
      <remap from="depth/image"     to="/camera/depth_registered/image_raw"/>
      <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>

      <remap from="goal_out"  to="current_goal"/>
      <remap from="move_base" to="/planner/move_base"/>
      <remap from="grid_map"  to="/map"/>


    <param name="RGBD/NeighborLinkRefining" type="string" value="true"/>
    <param name="RGBD/ProximityBySpace" type="string" value="true"/>
    <param name="Vis/MinInliers" type="string" value="12"/>
    <param name="Vis/InlierDistance" type="string" value="0.1"/>
    <param name="RGBD/AngularUpdate" type="string" value="0.01"/>
    <param name="RGBD/LinearUpdate" type="string" value="0.01"/>

      <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
      <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
      <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/>
    </node>

     <node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen">
          <remap from="rgb/image"       to="/camera/rgb/image_rect_color"/>
          <remap from="depth/image"     to="/camera/depth_registered/image_raw"/>
          <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
          <remap  from="rgbd_image" to="/camera/rgb/image_rect_color"/>
          <remap from="odom"            to="odom"/>

          <param name="frame_id"                    type="string" value="camera_link"/>
          <param name="odom_frame_id"               type="string" value="odom"/>
          <param name="ground_truth_frame_id"       type="string" value=""/>
          <param name="ground_truth_base_frame_id"  type="string" value=""/>
          <param name="wait_for_transform_duration" type="double" value="0.2"/>
          <param name="approx_sync"                 type="bool"   value="true"/>
          <param name="queue_size"                  type="int"    value="10"/>
          <param name="subscribe_rgbd"              type="bool"   value="false"/>
          <param name="guess_frame_id"              type="string" value=""/>
          <param name="guess_min_translation"       type="double" value="0"/>
          <param name="guess_min_rotation"          type="double" value="0"/>
        </node>
</group>

  <node pkg="nodelet" type="nodelet" name="points_xyzrgb" args="standalone rtabmap_ros/point_cloud_xyzrgb">
    <remap from="rgb/image"       to="/camera/rgb/image_rect_color"/>
    <remap from="depth/image"     to="/camera/depth_registered/image_raw"/>
    <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
    <remap from="cloud"           to="voxel_cloud" />

    <param name="queue_size" type="int" value="10"/>
    <param name="voxel_size" type="double" value="0.01"/>
  </node>

  <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depth_to_laser" args="image:=/camera/depth/image_raw camera_info:=/camera/rgb_camera_info"/>

  <node pkg="nodelet" type="nodelet" name="obstacles_detection" args="load rtabmap_ros/obstacles_detection stereo_nodelet">
     <remap from="cloud" to="/voxel_cloud"/>
     <remap from="obstacles" to="/planner_cloud"/>

     <param name="frame_id" type="string" value="base_footprint"/>
     <param name="map_frame_id" type="string" value="map"/>
     <param name="min_cluster_size" type="int" value="20"/>
     <param name="max_obstacles_height" type="double" value="0.0"/>
   </node>

  <group ns="planner">
      <remap from="openni_points" to="/planner_cloud"/>
      <remap from="map" to="/rtabmap/proj_map"/>
      <remap from="move_base_simple/goal" to="/planner_goal"/>

      <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
         <rosparam file="$(find tankbot)/yaml/costmap_common_params.yaml" command="load" ns="global_costmap" />
         <rosparam file="$(find tankbot)/yaml/costmap_common_params.yaml" command="load" ns="local_costmap" />
         <rosparam file="$(find tankbot)/yaml/local_costmap_params.yaml" command="load" />
         <rosparam file="$(find tankbot)/yaml/global_costmap_params.yaml" command="load" />
         <rosparam file="$(find tankbot)/yaml/base_local_planner_params.yaml" command="load" />
      </node>
   </group>

</launch>
